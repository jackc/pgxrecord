package pgxrecord_test

import (
	"context"
	"os"
	"testing"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/jackc/pgx/v5/pgxtest"
	"github.com/jackc/pgxrecord"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

var defaultConnTestRunner pgxtest.ConnTestRunner

func init() {
	defaultConnTestRunner = pgxtest.DefaultConnTestRunner()
	defaultConnTestRunner.CreateConfig = func(ctx context.Context, t testing.TB) *pgx.ConnConfig {
		config, err := pgx.ParseConfig(os.Getenv("PGXRECORD_TEST_DATABASE"))
		require.NoError(t, err)
		return config
	}
}

func TestTableLoadAllColumns(t *testing.T) {
	defaultConnTestRunner.RunTest(context.Background(), t, func(ctx context.Context, t testing.TB, conn *pgx.Conn) {
		tx, err := conn.Begin(ctx)
		require.NoError(t, err)
		defer tx.Rollback(ctx)

		_, err = tx.Exec(ctx, `create table t (
	id int primary key generated by default as identity,
	name text not null,
	age int
)`)
		require.NoError(t, err)

		table := &pgxrecord.Table{
			Name: pgx.Identifier{"t"},
		}
		err = table.LoadAllColumns(ctx, tx)
		require.NoError(t, err)

		require.Len(t, table.Columns, 3)
		expectedColumns := []pgxrecord.Column{
			{Name: "id", OID: pgtype.Int4OID, NotNull: true, PrimaryKey: true},
			{Name: "name", OID: pgtype.TextOID, NotNull: true, PrimaryKey: false},
			{Name: "age", OID: pgtype.Int4OID, NotNull: false, PrimaryKey: false},
		}
		for i := range expectedColumns {
			assert.Equalf(t, expectedColumns[i].Name, table.Columns[i].Name, "Column %d name", i+1)
			assert.Equalf(t, expectedColumns[i].OID, table.Columns[i].OID, "Column %d OID", i+1)
			assert.Equalf(t, expectedColumns[i].NotNull, table.Columns[i].NotNull, "Column %d not null", i+1)
			assert.Equalf(t, expectedColumns[i].PrimaryKey, table.Columns[i].PrimaryKey, "Column %d primary key", i+1)
		}
	})
}

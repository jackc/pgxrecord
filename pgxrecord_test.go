package pgxrecord_test

import (
	"context"
	"fmt"
	"os"
	"testing"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/jackc/pgx/v5/pgxtest"
	"github.com/jackc/pgxrecord"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

var defaultConnTestRunner pgxtest.ConnTestRunner

func init() {
	defaultConnTestRunner = pgxtest.DefaultConnTestRunner()
	defaultConnTestRunner.CreateConfig = func(ctx context.Context, t testing.TB) *pgx.ConnConfig {
		config, err := pgx.ParseConfig(os.Getenv("PGXRECORD_TEST_DATABASE"))
		require.NoError(t, err)
		return config
	}
}

func TestTableLoadAllColumns(t *testing.T) {
	t.Parallel()

	defaultConnTestRunner.RunTest(context.Background(), t, func(ctx context.Context, t testing.TB, conn *pgx.Conn) {
		_, err := conn.Exec(ctx, `create temporary table t (
	id int primary key generated by default as identity,
	name text not null,
	age int
)`)
		require.NoError(t, err)

		table := &pgxrecord.Table{
			Name: pgx.Identifier{"t"},
		}
		err = table.LoadAllColumns(ctx, conn)
		require.NoError(t, err)

		require.Len(t, table.Columns, 3)
		expectedColumns := []pgxrecord.Column{
			{Name: "id", OID: pgtype.Int4OID, NotNull: true, PrimaryKey: true},
			{Name: "name", OID: pgtype.TextOID, NotNull: true, PrimaryKey: false},
			{Name: "age", OID: pgtype.Int4OID, NotNull: false, PrimaryKey: false},
		}
		for i := range expectedColumns {
			assert.Equalf(t, expectedColumns[i].Name, table.Columns[i].Name, "Column %d name", i+1)
			assert.Equalf(t, expectedColumns[i].OID, table.Columns[i].OID, "Column %d OID", i+1)
			assert.Equalf(t, expectedColumns[i].NotNull, table.Columns[i].NotNull, "Column %d not null", i+1)
			assert.Equalf(t, expectedColumns[i].PrimaryKey, table.Columns[i].PrimaryKey, "Column %d primary key", i+1)
		}
	})
}

func TestTableSelectQuery(t *testing.T) {
	t.Parallel()

	defaultConnTestRunner.RunTest(context.Background(), t, func(ctx context.Context, t testing.TB, conn *pgx.Conn) {
		_, err := conn.Exec(ctx, `create temporary table t (
	id int primary key generated by default as identity,
	name text not null,
	age int
)`)
		require.NoError(t, err)

		table := &pgxrecord.Table{
			Name: pgx.Identifier{"t"},
		}
		err = table.LoadAllColumns(ctx, conn)
		require.NoError(t, err)

		require.Equal(t, `select "t"."id", "t"."name", "t"."age" from "t"`, table.SelectQuery())
	})
}

func TestTableNewRecord(t *testing.T) {
	t.Parallel()

	defaultConnTestRunner.RunTest(context.Background(), t, func(ctx context.Context, t testing.TB, conn *pgx.Conn) {
		_, err := conn.Exec(ctx, `create temporary table t (
	id int primary key generated by default as identity,
	name text not null,
	age int
)`)
		require.NoError(t, err)

		table := &pgxrecord.Table{
			Name: pgx.Identifier{"t"},
		}
		err = table.LoadAllColumns(ctx, conn)
		require.NoError(t, err)

		record := table.NewRecord()
		require.Equal(t, map[string]any{"id": nil, "name": nil, "age": nil}, record.Attributes())

		err = record.SetAttributesStrict(map[string]any{"name": "John", "age": 42})
		require.NoError(t, err)
		require.Equal(t, map[string]any{"id": nil, "name": "John", "age": 42}, record.Attributes())
	})
}

func TestTableFindByPK(t *testing.T) {
	t.Parallel()

	defaultConnTestRunner.RunTest(context.Background(), t, func(ctx context.Context, t testing.TB, conn *pgx.Conn) {
		_, err := conn.Exec(ctx, `create temporary table t (
	id int primary key generated by default as identity,
	name text not null,
	age int
)`)
		require.NoError(t, err)

		var id int32
		err = conn.QueryRow(ctx, `insert into t (name, age) values ('John', 42) returning id`).Scan(&id)
		require.NoError(t, err)

		table := &pgxrecord.Table{
			Name: pgx.Identifier{"t"},
		}
		err = table.LoadAllColumns(ctx, conn)
		require.NoError(t, err)

		record, err := table.FindByPK(ctx, conn, id)
		require.NoError(t, err)
		require.Equal(t, map[string]any{"id": int32(1), "name": "John", "age": int32(42)}, record.Attributes())
	})
}

func TestRecordSetAndGet(t *testing.T) {
	t.Parallel()

	defaultConnTestRunner.RunTest(context.Background(), t, func(ctx context.Context, t testing.TB, conn *pgx.Conn) {
		_, err := conn.Exec(ctx, `create temporary table t (
	id int primary key generated by default as identity,
	name text not null,
	age int
)`)
		require.NoError(t, err)

		table := &pgxrecord.Table{
			Name: pgx.Identifier{"t"},
		}
		err = table.LoadAllColumns(ctx, conn)
		require.NoError(t, err)

		record := table.NewRecord()

		record.Set("name", "John")
		name := record.Get("name")
		require.Equal(t, "John", name)
	})
}

func TestRecordSaveInsert(t *testing.T) {
	t.Parallel()

	defaultConnTestRunner.RunTest(context.Background(), t, func(ctx context.Context, t testing.TB, conn *pgx.Conn) {
		_, err := conn.Exec(ctx, `create temporary table t (
	id int primary key generated by default as identity,
	name text not null,
	age int
)`)
		require.NoError(t, err)

		table := &pgxrecord.Table{
			Name: pgx.Identifier{"t"},
		}
		err = table.LoadAllColumns(ctx, conn)
		require.NoError(t, err)

		record := table.NewRecord()
		err = record.SetAttributesStrict(map[string]any{"name": "John", "age": 42})
		require.NoError(t, err)
		err = record.Save(ctx, conn)
		require.NoError(t, err)

		require.Equal(t, map[string]any{"id": int32(1), "name": "John", "age": int32(42)}, record.Attributes())
	})
}

func TestRecordSaveUpdate(t *testing.T) {
	t.Parallel()

	defaultConnTestRunner.RunTest(context.Background(), t, func(ctx context.Context, t testing.TB, conn *pgx.Conn) {
		_, err := conn.Exec(ctx, `create temporary table t (
	id int primary key generated by default as identity,
	name text not null,
	age int
)`)
		require.NoError(t, err)

		var id int32
		err = conn.QueryRow(ctx, `insert into t (name, age) values ('John', 42) returning id`).Scan(&id)
		require.NoError(t, err)

		table := &pgxrecord.Table{
			Name: pgx.Identifier{"t"},
		}
		err = table.LoadAllColumns(ctx, conn)
		require.NoError(t, err)

		record, err := table.FindByPK(ctx, conn, id)
		require.NoError(t, err)
		require.Equal(t, map[string]any{"id": int32(1), "name": "John", "age": int32(42)}, record.Attributes())

		record.Set("name", "Bill")
		err = record.Save(ctx, conn)
		require.NoError(t, err)

		record, err = table.FindByPK(ctx, conn, id)
		require.NoError(t, err)
		require.Equal(t, map[string]any{"id": int32(1), "name": "Bill", "age": int32(42)}, record.Attributes())
	})
}

func TestRecordSaveNormalize(t *testing.T) {
	t.Parallel()

	defaultConnTestRunner.RunTest(context.Background(), t, func(ctx context.Context, t testing.TB, conn *pgx.Conn) {
		_, err := conn.Exec(ctx, `create temporary table t (
	id int primary key generated by default as identity,
	name text not null,
	age int
)`)
		require.NoError(t, err)

		normalizeCallCount := 0

		table := &pgxrecord.Table{
			Name: pgx.Identifier{"t"},
			Normalize: func(ctx context.Context, db pgxrecord.DB, table *pgxrecord.Table, record *pgxrecord.Record) error {
				record.Set("name", "Bill")
				normalizeCallCount++
				return nil
			},
		}
		err = table.LoadAllColumns(ctx, conn)
		require.NoError(t, err)

		// Insert calls normalize
		record := table.NewRecord()
		err = record.SetAttributesStrict(map[string]any{"name": "John", "age": 42})
		require.NoError(t, err)
		err = record.Save(ctx, conn)
		require.NoError(t, err)
		require.EqualValues(t, 1, normalizeCallCount)
		require.Equal(t, map[string]any{"id": int32(1), "name": "Bill", "age": int32(42)}, record.Attributes())

		// Update calls normalize
		err = record.SetAttributesStrict(map[string]any{"name": "George", "age": int32(43)})
		require.NoError(t, err)
		err = record.Save(ctx, conn)
		require.NoError(t, err)
		require.Equal(t, map[string]any{"id": int32(1), "name": "Bill", "age": int32(43)}, record.Attributes())
		require.EqualValues(t, 2, normalizeCallCount)
	})
}

func TestRecordSaveValidate(t *testing.T) {
	t.Parallel()

	defaultConnTestRunner.RunTest(context.Background(), t, func(ctx context.Context, t testing.TB, conn *pgx.Conn) {
		_, err := conn.Exec(ctx, `create temporary table t (
	id int primary key generated by default as identity,
	name text not null,
	age int
)`)
		require.NoError(t, err)

		validateCallCount := 0

		table := &pgxrecord.Table{
			Name: pgx.Identifier{"t"},
			Validate: func(ctx context.Context, db pgxrecord.DB, table *pgxrecord.Table, record *pgxrecord.Record) error {
				validateCallCount++

				ve := &pgxrecord.ValidationErrors{}
				if name := record.Get("name"); name == "" || name == nil {
					ve.Add("name", fmt.Errorf("cannot be blank"))
				}
				if age := record.Get("age"); age == nil {
					ve.Add("age", fmt.Errorf("cannot be blank"))
				}

				if ve.Len() > 0 {
					return ve
				}

				return nil
			},
		}
		err = table.LoadAllColumns(ctx, conn)
		require.NoError(t, err)

		// Insert calls Validate and blocks Save
		record := table.NewRecord()
		err = record.Save(ctx, conn)
		require.Error(t, err)
		require.EqualValues(t, 1, validateCallCount)
		require.EqualValues(t, 2, record.Errors().Len())
		nameErrors := record.Errors().On("name")
		require.Len(t, nameErrors, 1)
		require.Equal(t, "name: cannot be blank", nameErrors[0].Error())
		ageErrors := record.Errors().On("age")
		require.Len(t, ageErrors, 1)
		require.Equal(t, "age: cannot be blank", ageErrors[0].Error())
		require.Equal(t, map[string]any{"id": nil, "name": nil, "age": nil}, record.Attributes())

		// Fix bad attributes and save
		err = record.SetAttributesStrict(map[string]any{"name": "John", "age": 42})
		require.NoError(t, err)
		err = record.Save(ctx, conn)
		require.NoError(t, err)
		require.EqualValues(t, 2, validateCallCount)
		require.Nil(t, record.Errors())

		// Update calls Validate
		err = record.SetAttributesStrict(map[string]any{"name": nil})
		require.NoError(t, err)
		err = record.Save(ctx, conn)
		require.Error(t, err)
		require.EqualValues(t, 3, validateCallCount)
		require.Equal(t, map[string]any{"id": int32(1), "name": nil, "age": int32(42)}, record.Attributes())
	})
}

func TestRecordUpdateAttributes(t *testing.T) {
	t.Parallel()

	defaultConnTestRunner.RunTest(context.Background(), t, func(ctx context.Context, t testing.TB, conn *pgx.Conn) {
		table := &pgxrecord.Table{
			Name: pgx.Identifier{"t"},
			Columns: []*pgxrecord.Column{
				{Name: "id", OID: pgtype.Int4OID, NotNull: true, PrimaryKey: true},
				{Name: "name", OID: pgtype.TextOID, NotNull: true, PrimaryKey: false},
				{Name: "age", OID: pgtype.Int4OID, NotNull: false, PrimaryKey: false},
			},
		}

		record := table.NewRecord()
		require.Equal(t, map[string]any{"id": nil, "name": nil, "age": nil}, record.Attributes())

		record.SetAttributes(map[string]any{"name": "John", "age": 42, "ignore": "me"})
		require.Equal(t, map[string]any{"id": nil, "name": "John", "age": 42}, record.Attributes())
	})
}
